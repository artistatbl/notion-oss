{\rtf1\ansi\ansicpg1252\cocoartf2859
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ \
  pgTable, \
  varchar, \
  text, \
  timestamp, \
  boolean, \
  integer,\
  jsonb,\
  uuid,\
  index,\
  uniqueIndex\
\} from 'drizzle-orm/pg-core';\
import \{ relations \} from 'drizzle-orm';\
\
// ============================================================================\
// CORE TABLES\
// ============================================================================\
\
// Users table - manages authentication and user profiles\
export const users = pgTable('users', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  email: varchar('email', \{ length: 255 \}).notNull().unique(),\
  name: varchar('name', \{ length: 255 \}).notNull(),\
  avatar: varchar('avatar', \{ length: 500 \}),\
  preferences: jsonb('preferences'), // UI settings, themes, etc.\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
  updatedAt: timestamp('updated_at').defaultNow().notNull(),\
\});\
\
// Workspaces - top-level organization (like Notion workspaces)\
export const workspaces = pgTable('workspaces', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  name: varchar('name', \{ length: 255 \}).notNull(),\
  icon: varchar('icon', \{ length: 100 \}),\
  ownerId: uuid('owner_id').references(() => users.id).notNull(),\
  settings: jsonb('settings'), // workspace-level settings\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
  updatedAt: timestamp('updated_at').defaultNow().notNull(),\
\}, (table) => (\{\
  ownerIdIdx: index('workspaces_owner_id_idx').on(table.ownerId),\
\}));\
\
// Workspace members - who has access to what workspace\
export const workspaceMembers = pgTable('workspace_members', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  workspaceId: uuid('workspace_id').references(() => workspaces.id).notNull(),\
  userId: uuid('user_id').references(() => users.id).notNull(),\
  role: varchar('role', \{ length: 20 \}).notNull().default('member'), // 'owner', 'admin', 'member', 'viewer'\
  joinedAt: timestamp('joined_at').defaultNow().notNull(),\
\}, (table) => (\{\
  workspaceUserIdx: uniqueIndex('workspace_members_workspace_user_idx')\
    .on(table.workspaceId, table.userId),\
\}));\
\
// ============================================================================\
// ORGANIZATION TABLES\
// ============================================================================\
\
// Folders - hierarchical organization of notes\
export const folders = pgTable('folders', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  name: varchar('name', \{ length: 255 \}).notNull(),\
  icon: varchar('icon', \{ length: 100 \}),\
  color: varchar('color', \{ length: 7 \}), // hex color\
  workspaceId: uuid('workspace_id').references(() => workspaces.id).notNull(),\
  parentId: uuid('parent_id').references(() => folders.id),\
  position: integer('position').notNull().default(0),\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
  updatedAt: timestamp('updated_at').defaultNow().notNull(),\
\}, (table) => (\{\
  workspaceIdIdx: index('folders_workspace_id_idx').on(table.workspaceId),\
  parentIdIdx: index('folders_parent_id_idx').on(table.parentId),\
  positionIdx: index('folders_position_idx').on(table.parentId, table.position),\
\}));\
\
// Tags - flexible labeling system\
export const tags = pgTable('tags', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  name: varchar('name', \{ length: 100 \}).notNull(),\
  color: varchar('color', \{ length: 7 \}), // hex color\
  workspaceId: uuid('workspace_id').references(() => workspaces.id).notNull(),\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
\}, (table) => (\{\
  workspaceIdIdx: index('tags_workspace_id_idx').on(table.workspaceId),\
  nameWorkspaceIdx: uniqueIndex('tags_name_workspace_idx')\
    .on(table.name, table.workspaceId),\
\}));\
\
// ============================================================================\
// CONTENT TABLES\
// ============================================================================\
\
// Notes - the main content containers (like Notion pages)\
export const notes = pgTable('notes', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  title: varchar('title', \{ length: 500 \}).notNull(),\
  icon: varchar('icon', \{ length: 100 \}), // emoji or icon identifier\
  coverImage: varchar('cover_image', \{ length: 500 \}),\
  workspaceId: uuid('workspace_id').references(() => workspaces.id).notNull(),\
  folderId: uuid('folder_id').references(() => folders.id),\
  createdBy: uuid('created_by').references(() => users.id).notNull(),\
  \
  // Status flags\
  isFavorite: boolean('is_favorite').default(false),\
  isPinned: boolean('is_pinned').default(false),\
  isArchived: boolean('is_archived').default(false),\
  isPublic: boolean('is_public').default(false),\
  isTemplate: boolean('is_template').default(false),\
  \
  // Metadata\
  properties: jsonb('properties'), // custom properties like Notion databases\
  \
  // Timestamps\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
  updatedAt: timestamp('updated_at').defaultNow().notNull(),\
  lastViewedAt: timestamp('last_viewed_at'),\
  publishedAt: timestamp('published_at'),\
\}, (table) => (\{\
  workspaceIdIdx: index('notes_workspace_id_idx').on(table.workspaceId),\
  folderIdIdx: index('notes_folder_id_idx').on(table.folderId),\
  createdByIdx: index('notes_created_by_idx').on(table.createdBy),\
  createdAtIdx: index('notes_created_at_idx').on(table.createdAt),\
  titleIdx: index('notes_title_idx').on(table.title),\
  isArchivedIdx: index('notes_is_archived_idx').on(table.isArchived),\
\}));\
\
// Blocks - the core of the block-based editor (like Notion blocks)\
export const blocks = pgTable('blocks', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  noteId: uuid('note_id').references(() => notes.id, \{ onDelete: 'cascade' \}).notNull(),\
  parentId: uuid('parent_id').references(() => blocks.id, \{ onDelete: 'cascade' \}), // for nested blocks\
  \
  // Block structure\
  type: varchar('type', \{ length: 50 \}).notNull(), // 'paragraph', 'heading', 'list', 'code', etc.\
  content: jsonb('content').notNull(), // block content and properties\
  position: integer('position').notNull(), // order within parent/note\
  \
  // Timestamps\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
  updatedAt: timestamp('updated_at').defaultNow().notNull(),\
\}, (table) => (\{\
  noteIdIdx: index('blocks_note_id_idx').on(table.noteId),\
  parentIdIdx: index('blocks_parent_id_idx').on(table.parentId),\
  positionIdx: index('blocks_position_idx').on(table.noteId, table.parentId, table.position),\
  typeIdx: index('blocks_type_idx').on(table.type),\
\}));\
\
// ============================================================================\
// RELATIONSHIP TABLES\
// ============================================================================\
\
// Note tags - many-to-many relationship between notes and tags\
export const noteTags = pgTable('note_tags', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  noteId: uuid('note_id').references(() => notes.id, \{ onDelete: 'cascade' \}).notNull(),\
  tagId: uuid('tag_id').references(() => tags.id, \{ onDelete: 'cascade' \}).notNull(),\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
\}, (table) => (\{\
  noteTagIdx: uniqueIndex('note_tags_note_tag_idx').on(table.noteId, table.tagId),\
  noteIdIdx: index('note_tags_note_id_idx').on(table.noteId),\
  tagIdIdx: index('note_tags_tag_id_idx').on(table.tagId),\
\}));\
\
// ============================================================================\
// COLLABORATION TABLES\
// ============================================================================\
\
// Block comments - collaborative commenting on specific blocks\
export const blockComments = pgTable('block_comments', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  blockId: uuid('block_id').references(() => blocks.id, \{ onDelete: 'cascade' \}).notNull(),\
  userId: uuid('user_id').references(() => users.id).notNull(),\
  content: text('content').notNull(),\
  isResolved: boolean('is_resolved').default(false),\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
  updatedAt: timestamp('updated_at').defaultNow().notNull(),\
\}, (table) => (\{\
  blockIdIdx: index('block_comments_block_id_idx').on(table.blockId),\
  userIdIdx: index('block_comments_user_id_idx').on(table.userId),\
  createdAtIdx: index('block_comments_created_at_idx').on(table.createdAt),\
\}));\
\
// Note permissions - granular access control\
export const notePermissions = pgTable('note_permissions', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  noteId: uuid('note_id').references(() => notes.id, \{ onDelete: 'cascade' \}).notNull(),\
  userId: uuid('user_id').references(() => users.id, \{ onDelete: 'cascade' \}).notNull(),\
  permission: varchar('permission', \{ length: 20 \}).notNull(), // 'view', 'comment', 'edit', 'admin'\
  grantedBy: uuid('granted_by').references(() => users.id).notNull(),\
  grantedAt: timestamp('granted_at').defaultNow().notNull(),\
\}, (table) => (\{\
  noteUserIdx: uniqueIndex('note_permissions_note_user_idx').on(table.noteId, table.userId),\
  noteIdIdx: index('note_permissions_note_id_idx').on(table.noteId),\
  userIdIdx: index('note_permissions_user_id_idx').on(table.userId),\
\}));\
\
// ============================================================================\
// UTILITY TABLES\
// ============================================================================\
\
// Attachments - file attachments linked to blocks or notes\
export const attachments = pgTable('attachments', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  noteId: uuid('note_id').references(() => notes.id, \{ onDelete: 'cascade' \}),\
  blockId: uuid('block_id').references(() => blocks.id, \{ onDelete: 'cascade' \}),\
  \
  // File metadata\
  fileName: varchar('file_name', \{ length: 255 \}).notNull(),\
  fileSize: integer('file_size').notNull(),\
  mimeType: varchar('mime_type', \{ length: 100 \}).notNull(),\
  \
  // Storage info\
  url: varchar('url', \{ length: 1000 \}).notNull(),\
  provider: varchar('provider', \{ length: 50 \}).notNull(), // 'google_drive', 'local', 's3', etc.\
  providerId: varchar('provider_id', \{ length: 255 \}),\
  \
  // Metadata\
  uploadedBy: uuid('uploaded_by').references(() => users.id).notNull(),\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
\}, (table) => (\{\
  noteIdIdx: index('attachments_note_id_idx').on(table.noteId),\
  blockIdIdx: index('attachments_block_id_idx').on(table.blockId),\
  uploadedByIdx: index('attachments_uploaded_by_idx').on(table.uploadedBy),\
\}));\
\
// Saved searches - user's saved search queries\
export const savedSearches = pgTable('saved_searches', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  name: varchar('name', \{ length: 255 \}).notNull(),\
  query: varchar('query', \{ length: 500 \}).notNull(),\
  filters: jsonb('filters'), // search filters as JSON\
  workspaceId: uuid('workspace_id').references(() => workspaces.id).notNull(),\
  userId: uuid('user_id').references(() => users.id).notNull(),\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
\}, (table) => (\{\
  workspaceIdIdx: index('saved_searches_workspace_id_idx').on(table.workspaceId),\
  userIdIdx: index('saved_searches_user_id_idx').on(table.userId),\
\}));\
\
// Templates - reusable note/block structures\
export const templates = pgTable('templates', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  name: varchar('name', \{ length: 255 \}).notNull(),\
  description: text('description'),\
  icon: varchar('icon', \{ length: 100 \}),\
  category: varchar('category', \{ length: 100 \}),\
  workspaceId: uuid('workspace_id').references(() => workspaces.id).notNull(),\
  createdBy: uuid('created_by').references(() => users.id).notNull(),\
  isPublic: boolean('is_public').default(false),\
  blocks: jsonb('blocks').notNull(), // template block structure\
  properties: jsonb('properties'), // template properties\
  createdAt: timestamp('created_at').defaultNow().notNull(),\
  updatedAt: timestamp('updated_at').defaultNow().notNull(),\
\}, (table) => (\{\
  workspaceIdIdx: index('templates_workspace_id_idx').on(table.workspaceId),\
  createdByIdx: index('templates_created_by_idx').on(table.createdBy),\
  categoryIdx: index('templates_category_idx').on(table.category),\
\}));\
\
// Activity log - track changes for collaboration\
export const activityLog = pgTable('activity_log', \{\
  id: uuid('id').primaryKey().defaultRandom(),\
  workspaceId: uuid('workspace_id').references(() => workspaces.id).notNull(),\
  userId: uuid('user_id').references(() => users.id).notNull(),\
  noteId: uuid('note_id').references(() => notes.id, \{ onDelete: 'cascade' \}),\
  blockId: uuid('block_id').references(() => blocks.id, \{ onDelete: 'cascade' \}),\
  \
  action: varchar('action', \{ length: 50 \}).notNull(), // 'created', 'updated', 'deleted', etc.\
  entityType: varchar('entity_type', \{ length: 50 \}).notNull(), // 'note', 'block', 'comment', etc.\
  details: jsonb('details'), // additional action details\
  \
  createdAt: timestamp('created_at').defaultNow().notNull(),\
\}, (table) => (\{\
  workspaceIdIdx: index('activity_log_workspace_id_idx').on(table.workspaceId),\
  userIdIdx: index('activity_log_user_id_idx').on(table.userId),\
  noteIdIdx: index('activity_log_note_id_idx').on(table.noteId),\
  createdAtIdx: index('activity_log_created_at_idx').on(table.createdAt),\
  actionIdx: index('activity_log_action_idx').on(table.action),\
\}));\
\
// ============================================================================\
// RELATIONS\
// ============================================================================\
\
export const usersRelations = relations(users, (\{ many \}) => (\{\
  ownedWorkspaces: many(workspaces),\
  workspaceMemberships: many(workspaceMembers),\
  createdNotes: many(notes),\
  blockComments: many(blockComments),\
  notePermissions: many(notePermissions),\
  attachments: many(attachments),\
  savedSearches: many(savedSearches),\
  templates: many(templates),\
  activityLog: many(activityLog),\
\}));\
\
export const workspacesRelations = relations(workspaces, (\{ one, many \}) => (\{\
  owner: one(users, \{\
    fields: [workspaces.ownerId],\
    references: [users.id],\
  \}),\
  members: many(workspaceMembers),\
  folders: many(folders),\
  tags: many(tags),\
  notes: many(notes),\
  savedSearches: many(savedSearches),\
  templates: many(templates),\
  activityLog: many(activityLog),\
\}));\
\
export const workspaceMembersRelations = relations(workspaceMembers, (\{ one \}) => (\{\
  workspace: one(workspaces, \{\
    fields: [workspaceMembers.workspaceId],\
    references: [workspaces.id],\
  \}),\
  user: one(users, \{\
    fields: [workspaceMembers.userId],\
    references: [users.id],\
  \}),\
\}));\
\
export const foldersRelations = relations(folders, (\{ one, many \}) => (\{\
  workspace: one(workspaces, \{\
    fields: [folders.workspaceId],\
    references: [workspaces.id],\
  \}),\
  parent: one(folders, \{\
    fields: [folders.parentId],\
    references: [folders.id],\
  \}),\
  children: many(folders),\
  notes: many(notes),\
\}));\
\
export const tagsRelations = relations(tags, (\{ one, many \}) => (\{\
  workspace: one(workspaces, \{\
    fields: [tags.workspaceId],\
    references: [workspaces.id],\
  \}),\
  noteTags: many(noteTags),\
\}));\
\
export const notesRelations = relations(notes, (\{ one, many \}) => (\{\
  workspace: one(workspaces, \{\
    fields: [notes.workspaceId],\
    references: [workspaces.id],\
  \}),\
  folder: one(folders, \{\
    fields: [notes.folderId],\
    references: [folders.id],\
  \}),\
  creator: one(users, \{\
    fields: [notes.createdBy],\
    references: [users.id],\
  \}),\
  blocks: many(blocks),\
  noteTags: many(noteTags),\
  permissions: many(notePermissions),\
  attachments: many(attachments),\
  activityLog: many(activityLog),\
\}));\
\
export const blocksRelations = relations(blocks, (\{ one, many \}) => (\{\
  note: one(notes, \{\
    fields: [blocks.noteId],\
    references: [notes.id],\
  \}),\
  parent: one(blocks, \{\
    fields: [blocks.parentId],\
    references: [blocks.id],\
  \}),\
  children: many(blocks),\
  comments: many(blockComments),\
  attachments: many(attachments),\
  activityLog: many(activityLog),\
\}));\
\
export const noteTagsRelations = relations(noteTags, (\{ one \}) => (\{\
  note: one(notes, \{\
    fields: [noteTags.noteId],\
    references: [notes.id],\
  \}),\
  tag: one(tags, \{\
    fields: [noteTags.tagId],\
    references: [tags.id],\
  \}),\
\}));\
\
export const blockCommentsRelations = relations(blockComments, (\{ one \}) => (\{\
  block: one(blocks, \{\
    fields: [blockComments.blockId],\
    references: [blocks.id],\
  \}),\
  user: one(users, \{\
    fields: [blockComments.userId],\
    references: [users.id],\
  \}),\
\}));\
\
export const notePermissionsRelations = relations(notePermissions, (\{ one \}) => (\{\
  note: one(notes, \{\
    fields: [notePermissions.noteId],\
    references: [notes.id],\
  \}),\
  user: one(users, \{\
    fields: [notePermissions.userId],\
    references: [users.id],\
  \}),\
  grantedByUser: one(users, \{\
    fields: [notePermissions.grantedBy],\
    references: [users.id],\
  \}),\
\}));\
\
export const attachmentsRelations = relations(attachments, (\{ one \}) => (\{\
  note: one(notes, \{\
    fields: [attachments.noteId],\
    references: [notes.id],\
  \}),\
  block: one(blocks, \{\
    fields: [attachments.blockId],\
    references: [blocks.id],\
  \}),\
  uploader: one(users, \{\
    fields: [attachments.uploadedBy],\
    references: [users.id],\
  \}),\
\}));\
\
export const savedSearchesRelations = relations(savedSearches, (\{ one \}) => (\{\
  workspace: one(workspaces, \{\
    fields: [savedSearches.workspaceId],\
    references: [workspaces.id],\
  \}),\
  user: one(users, \{\
    fields: [savedSearches.userId],\
    references: [users.id],\
  \}),\
\}));\
\
export const templatesRelations = relations(templates, (\{ one \}) => (\{\
  workspace: one(workspaces, \{\
    fields: [templates.workspaceId],\
    references: [workspaces.id],\
  \}),\
  creator: one(users, \{\
    fields: [templates.createdBy],\
    references: [users.id],\
  \}),\
\}));\
\
export const activityLogRelations = relations(activityLog, (\{ one \}) => (\{\
  workspace: one(workspaces, \{\
    fields: [activityLog.workspaceId],\
    references: [workspaces.id],\
  \}),\
  user: one(users, \{\
    fields: [activityLog.userId],\
    references: [users.id],\
  \}),\
  note: one(notes, \{\
    fields: [activityLog.noteId],\
    references: [notes.id],\
  \}),\
  block: one(blocks, \{\
    fields: [activityLog.blockId],\
    references: [blocks.id],\
  \}),\
\}));}